import os
import time
import logging
import json
from dotenv import load_dotenv

from session_manager.session_manager import SessionManager, SessionManagerError
from google.cloud import firestore # Importar firestore para manejar Timestamps en los tests

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()

session_manager = None

try:
    session_manager = SessionManager()
except SessionManagerError as e:
    logger.critical(f"Error fatal al inicializar SessionManager en las pruebas: {e}. Las pruebas no se ejecutar√°n.")

def run_session_tests():
    """Ejecuta un conjunto de pruebas para el SessionManager (Firestore)."""
    if session_manager is None:
        logger.error("SessionManager no pudo ser inicializado. Saltando pruebas.")
        return

    # Usaremos un n√∫mero de tel√©fono real simulado como identificador
    user_phone_number_for_test = "3001234567" # Este ser√° el identificador en el ID de sesi√≥n
    channel = "TL"

    try:
        logger.info("üöÄ === INICIO DE PRUEBAS DEL SESSION_MANAGER (FIRESTORE) ===\n")

        # 1. Crear sesi√≥n (esto crea un documento en Firestore)
        logger.info("1Ô∏è‚É£ Creando o recuperando una sesi√≥n activa en Firestore con n√∫mero de tel√©fono...")
        session_info = session_manager.create_session_with_history_check(user_phone_number_for_test, channel)
        session_id = session_info["new_session_id"]

        logger.info(f"‚úÖ Sesi√≥n activa gestionada: {session_id}")
        logger.info(f"üìä Historial previo detectado: {session_info['has_previous_history']}")
        logger.info(f"üìà Sesiones previas encontradas: {session_info['previous_sessions_count']}")

        # Peque√±a pausa para asegurar la escritura, aunque Firestore es r√°pido
        time.sleep(1) 

        # 2. Agregar mensajes al historial de la sesi√≥n (actualiza el documento en Firestore)
        logger.info(f"\n2Ô∏è‚É£ Agregando mensajes al historial de la sesi√≥n en Firestore...")
        session_manager.add_message_to_session(session_id, "Hola, necesito ayuda", "user")
        time.sleep(1)
        session_manager.add_message_to_session(session_id, "¬°Hola! ¬øEn qu√© puedo ayudarte?", "bot")
        time.sleep(1)
        logger.info("Mensajes de conversaci√≥n agregados.")

        # 3. Actualizar el consentimiento en los campos dedicados del documento en Firestore
        logger.info(f"\n3Ô∏è‚É£ Actualizando los campos 'consentimiento' y 'timestamp_consentimiento' en Firestore...")
        consent_status = "autorizado"
        success_update = session_manager.update_consent_for_session(session_id, consent_status)
        if success_update:
            logger.info(f"‚úÖ Campos de consentimiento actualizados en Firestore para la sesi√≥n {session_id}.")
        else:
            logger.warning(f"‚ö†Ô∏è Fallo al actualizar los campos de consentimiento en Firestore para la sesi√≥n {session_id}.")

        time.sleep(1) # Pausa para asegurar la actualizaci√≥n del consentimiento

        session_manager.add_message_to_session(session_id, "Necesito informaci√≥n sobre mi medicamento", "user")
        logger.info("Mensaje adicional agregado.")
        time.sleep(1)

        # 4. Obtener historial completo de la sesi√≥n de Firestore
        logger.info(f"\n4Ô∏è‚É£ Obteniendo historial completo de la sesi√≥n de Firestore...")
        conversation = session_manager.get_conversation_history(session_id)
        logger.info(f"üí¨ Total de entradas en el historial de conversaci√≥n: {len(conversation)}")

        logger.info("√öltimas entradas del historial (buscando evento de consentimiento):")
        found_consent_event_in_history = False
        for msg in conversation[-5:]: # Mostrar las √∫ltimas 5 entradas
            sender = msg.get("sender", "unknown")
            message = msg.get("message", "")
            timestamp = msg.get("timestamp", "")
            event_type = msg.get("event_type", "N/A")
            consent_status_in_msg = msg.get("consent_status", "N/A") # Esto es lo que falla para el JSON

            # --- MODIFICAR AQU√ç ---
            # Si el evento es de consentimiento, el 'message' contiene un JSON, intentar parsearlo.
            if event_type == "consent_response" and message:
                try:
                    parsed_message_data = json.loads(message)
                    consent_status_in_msg = parsed_message_data.get("consent_status", "N/A")
                except json.JSONDecodeError:
                    pass # Si no es un JSON v√°lido, no pasa nada
            # --- FIN MODIFICACI√ìN ---

            logger.info(f"   [{timestamp}] ({event_type}) {sender}: {message} (Consent: {consent_status_in_msg})")
            if event_type == "consent_response" and consent_status_in_msg == "autorizado":
                found_consent_event_in_history = True

        if found_consent_event_in_history:
            logger.info("‚úÖ Evento de consentimiento 'autorizado' encontrado en el historial de conversaci√≥n.")
        else:
            logger.warning("‚ö†Ô∏è Evento de consentimiento 'autorizado' NO encontrado en el historial de conversaci√≥n.")

        # 5. Prueba de expiraci√≥n (Firestore gestiona el estado de sesi√≥n 'activa'/'cerrado')
        expiration_test_seconds = 5 # Tiempo corto para la prueba
        logger.info(f"\n5Ô∏è‚É£ Probando expiraci√≥n (se cerrar√° la sesi√≥n en Firestore si est√° inactiva por {expiration_test_seconds}s)...")
        time.sleep(expiration_test_seconds + 2) # Esperar un poco m√°s para que 'expire'

        was_expired = session_manager.check_and_expire_session(session_id, expiration_seconds=expiration_test_seconds)
        if was_expired:
            logger.info("‚úÖ Sesi√≥n expirada y marcada como 'cerrado' en Firestore.")
        else:
            logger.warning("‚ö†Ô∏è Sesi√≥n a√∫n no ha expirado o hubo un problema al cerrarla.")

        # 6. Mostrar sesiones previas (verificando el consentimiento desde Firestore)
        logger.info(f"\n6Ô∏è‚É£ Buscando todas las sesiones del identificador '{user_phone_number_for_test}' en Firestore...")
        all_sessions = session_manager.get_previous_sessions_by_phone(user_phone_number_for_test)
        logger.info(f"üìã Total sesiones encontradas para '{user_phone_number_for_test}': {len(all_sessions)}")

        if all_sessions:
            logger.info("Las 3 sesiones m√°s recientes (verificando consentimiento en el documento de Firestore):")
            for session in all_sessions[:3]:
                logger.info(
                    f"   - ID: {session['session_id']}, Creada: {session['created_at']}, "
                    f"Consentimiento (desde Firestore): {session['consentimiento_status']} ({session['timestamp_consentimiento']})"
                )
        else:
            logger.info("No se encontraron sesiones previas para este identificador en Firestore.")

        logger.info("\n‚úÖ === PRUEBAS DEL SESSION_MANAGER (FIRESTORE) COMPLETADAS EXITOSAMENTE ===\n")

    except SessionManagerError as e:
        logger.exception(f"‚ùå Error espec√≠fico de SessionManager durante las pruebas: {e}")
        logger.error("\n‚ùå === PRUEBAS DEL SESSION_MANAGER FINALIZADAS CON ERRORES ESPEC√çFICOS ===\n")
    except Exception as e:
        logger.exception(f"‚ùå Error cr√≠tico inesperado durante las pruebas del SessionManager: {e}")
        logger.error("\n‚ùå === PRUEBAS DEL SESSION_MANAGER FINALIZADAS CON ERRORES INESPERADOS ===\n")

if __name__ == "__main__":
    run_session_tests()